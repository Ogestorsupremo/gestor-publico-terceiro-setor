import streamlit as st
import pandas as pd
import datetime

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Gestor P√∫blico - Terceiro Setor", layout="wide")

# ----------------------------
# üöÄ Cabe√ßalho Principal
# ----------------------------
st.title("üöÄ Gestor P√∫blico do Terceiro Setor")
st.subheader("Ferramenta colaborativa para gest√£o eficiente de projetos sociais")

st.markdown("""
Bem-vindo(a) ao nosso aplicativo! Aqui voc√™ pode:

- ‚úÖ Organizar projetos
- üìä Controlar finan√ßas
- üß† Centralizar dados de gest√£o
- üë• Trabalhar de forma colaborativa com at√© 4 pessoas em tempo real

---

### üîß Funcionalidades principais:

1Ô∏è‚É£ Scanner de Editais P√∫blicos  
2Ô∏è‚É£ An√°lise de Elegibilidade  
3Ô∏è‚É£ Gera√ß√£o de Projeto Simplificado  
4Ô∏è‚É£ Painel de Acompanhamento de Projetos  
5Ô∏è‚É£ Upload e Gest√£o de Documentos da Entidade  

---
""")

# ----------------------------
# üîé Scanner de Oportunidades
# ----------------------------
st.header("üìë Scanner de Oportunidades - Editais P√∫blicos")
st.write("Busque oportunidades de transfer√™ncia volunt√°ria da Uni√£o e outros √≥rg√£os p√∫blicos.")

if st.button("üîç Buscar Editais Dispon√≠veis"):
    dados_editais = [
        {
            "√ìrg√£o": "Minist√©rio da Sa√∫de",
            "T√≠tulo": "Apoio a A√ß√µes na Aten√ß√£o B√°sica",
            "Valor": "R$ 500.000,00",
            "Data Limite": "30/06/2025",
            "Link": "https://www.transferegov.gov.br"
        },
        {
            "√ìrg√£o": "FNDE",
            "T√≠tulo": "Reforma de Escolas Municipais",
            "Valor": "R$ 1.200.000,00",
            "Data Limite": "15/07/2025",
            "Link": "https://www.fnde.gov.br"
        },
        {
            "√ìrg√£o": "Minist√©rio da Cultura",
            "T√≠tulo": "Fomento √† Cultura em Pequenos Munic√≠pios",
            "Valor": "R$ 350.000,00",
            "Data Limite": "05/08/2025",
            "Link": "https://www.transferegov.gov.br"
        },
    ]

    df = pd.DataFrame(dados_editais)
    st.subheader("üìã Editais Encontrados")
    st.dataframe(df, use_container_width=True)
    st.success("Busca conclu√≠da! ‚úÖ")
else:
    st.info("Clique no bot√£o acima para buscar editais dispon√≠veis.")

st.divider()

# ----------------------------
# üß† An√°lise de Elegibilidade
# ----------------------------
st.header("üß† An√°lise de Elegibilidade da Entidade")

cnpj = st.text_input("Informe o CNPJ da entidade (somente n√∫meros)")

if st.button("üö¶ Verificar Elegibilidade"):
    if cnpj.strip() == "":
        st.warning("Por favor, informe um CNPJ v√°lido.")
    else:
        st.subheader("üîç Resultado da An√°lise:")

        resultado = {
            "CNPJ Ativo na Receita Federal": "‚úÖ Regular",
            "Situa√ß√£o no CAUC": "‚ùå Irregular - Pend√™ncias Financeiras",
            "Certid√£o Negativa Federal": "‚úÖ Regular",
            "Certid√£o Estadual": "‚úÖ Regular",
            "Observa√ß√µes": "‚ö†Ô∏è Resolver pend√™ncias no CAUC para avan√ßar com projetos p√∫blicos."
        }

        resultado_df = pd.DataFrame(list(resultado.items()), columns=["Item", "Status"])
        st.table(resultado_df)

        if "‚ùå" in "".join(resultado.values()):
            st.error("‚ö†Ô∏è A entidade possui pend√™ncias. Recomenda-se resolver antes de submeter projetos.")
        else:
            st.success("‚úÖ Tudo certo! A entidade est√° apta para receber recursos p√∫blicos.")

st.divider()

# ----------------------------
# üìù Gera√ß√£o de Projeto
# ----------------------------
st.header("üìë Gera√ß√£o Autom√°tica de Projeto")

nome_projeto = st.text_input("T√≠tulo do Projeto")
area_atuacao = st.selectbox("√Årea de Atua√ß√£o", ["Educa√ß√£o", "Sa√∫de", "Assist√™ncia Social", "Cultura", "Esporte", "Outros"])
valor_projeto = st.number_input("Valor Total do Projeto (R$)", min_value=1000.0, step=1000.0)

if st.button("üöÄ Gerar Projeto"):
    if nome_projeto.strip() == "":
        st.warning("Por favor, preencha o t√≠tulo do projeto.")
    else:
        st.subheader(f"üìÑ Projeto: {nome_projeto}")

        st.markdown(f"""
        ### ü©∫ Diagn√≥stico
        H√° uma necessidade significativa na √°rea de **{area_atuacao}**, onde a comunidade local enfrenta desafios constantes que comprometem sua qualidade de vida. Este projeto busca mitigar tais dificuldades atrav√©s de a√ß√µes estruturadas.

        ### üìú Justificativa
        A implementa√ß√£o deste projeto visa promover melhorias na √°rea de **{area_atuacao}**, atendendo diretamente a popula√ß√£o e fortalecendo as pol√≠ticas p√∫blicas locais. Considera-se tamb√©m os Objetivos de Desenvolvimento Sustent√°vel (ODS) alinhados √†s diretrizes governamentais.

        ### üéØ Objetivos
        - Promover a√ß√µes voltadas para melhoria da **{area_atuacao}**.
        - Fortalecer a atua√ß√£o do terceiro setor na regi√£o.
        - Contribuir com o desenvolvimento social e econ√¥mico.

        ### üóÇÔ∏è Plano de Trabalho
        - **Meta 1:** In√≠cio das atividades de mobiliza√ß√£o comunit√°ria.
        - **Meta 2:** Execu√ß√£o das atividades t√©cnicas e operacionais.
        - **Meta 3:** Acompanhamento e avalia√ß√£o de resultados.

        ### üìÖ Cronograma
        - **M√™s 1:** Planejamento e mobiliza√ß√£o.
        - **M√™s 2-5:** Execu√ß√£o das a√ß√µes.
        - **M√™s 6:** Avalia√ß√£o e presta√ß√£o de contas.

        ### üí∞ Or√ßamento Total
        **R$ {valor_projeto:,.2f}**

        ### üèõÔ∏è Termo de Refer√™ncia (Simplificado)
        - Objeto: Execu√ß√£o do projeto "{nome_projeto}" na √°rea de **{area_atuacao}**.
        - Justificativa: Atender demandas da comunidade, conforme diagn√≥stico.
        - Valor estimado: R$ {valor_projeto:,.2f}.
        - Vig√™ncia: 6 meses.

        ---
        ‚úÖ Documento gerado automaticamente. Personalize conforme necessidade.
        """)

        st.success("üöÄ Projeto gerado com sucesso!")

st.divider()

# ----------------------------
# üìä Painel de Acompanhamento
# ----------------------------
st.header("üìä Painel de Acompanhamento de Projetos")

dados_projetos = [
    {
        "Projeto": "Apoio √† Sa√∫de Municipal",
        "Status": "Em Execu√ß√£o",
        "Valor (R$)": 500000,
        "Data Limite": "30/06/2025"
    },
    {
        "Projeto": "Reforma de Escolas Municipais",
        "Status": "Aprovado",
        "Valor (R$)": 1200000,
        "Data Limite": "15/07/2025"
    },
    {
        "Projeto": "Fomento √† Cultura Local",
        "Status": "Presta√ß√£o de Contas",
        "Valor (R$)": 350000,
        "Data Limite": "05/08/2025"
    }
]

df_painel = pd.DataFrame(dados_projetos)

st.subheader("üìã Status dos Projetos")
st.dataframe(df_painel, use_container_width=True)

st.info("üö¶ Acompanhe os projetos e seus respectivos status.")

st.divider()

# ----------------------------
# üìÇ Gest√£o de Documentos
# ----------------------------
st.header("üìÇ Gest√£o de Documentos da Entidade")
st.subheader("Organize e envie documentos essenciais para habilita√ß√£o da entidade.")

st.markdown("""
Envie aqui documentos importantes da sua organiza√ß√£o, como:

- üèõÔ∏è Estatuto Social
- üìù Ata de Constitui√ß√£o
- ‚úÖ Certid√µes Negativas
- üìÑ Declara√ß√µes
- üìë Outros documentos obrigat√≥rios
""")

if 'arquivos' not in st.session_state:
    st.session_state['arquivos'] = []

st.subheader("‚¨ÜÔ∏è Envio de Documentos")
arquivo = st.file_uploader("Selecione um arquivo", type=['pdf', 'jpg', 'png', 'docx'])
descricao = st.text_input("Descri√ß√£o do documento (ex.: Estatuto Social, Certid√£o, etc.)")

if st.button("üì§ Enviar Documento"):
    if arquivo is not None and descricao.strip() != "":
        st.session_state['arquivos'].append({
            "Nome": arquivo.name,
            "Descri√ß√£o": descricao,
            "Data Upload": datetime.datetime.now().strftime('%d/%m/%Y %H:%M'),
            "Arquivo": arquivo
        })
        st.success(f"‚úÖ Documento '{arquivo.name}' enviado com sucesso!")
    else:
        st.warning("Por favor, selecione um arquivo e preencha a descri√ß√£o.")

st.subheader("üìú Documentos Enviados")

if len(st.session_state['arquivos']) > 0:
    df_arquivos = pd.DataFrame([{
        "Nome": item['Nome'],
        "Descri√ß√£o": item['Descri√ß√£o'],
        "Data Upload": item['Data Upload']
    } for item in st.session_state['arquivos']])

    st.dataframe(df_arquivos, use_container_width=True)

    for idx, item in enumerate(st.session_state['arquivos']):
        with st.expander(f"üìÑ {item['Nome']}"):
            st.write(f"**Descri√ß√£o:** {item['Descri√ß√£o']}")
            st.write(f"**Enviado em:** {item['Data Upload']}")
            st.download_button(
                label="‚¨áÔ∏è Baixar Arquivo",
                data=item['Arquivo'].getvalue(),
                file_name=item['Nome']
            )
            if st.button(f"üóëÔ∏è Remover '{item['Nome']}'", key=f"remove_{idx}"):
                st.session_state['arquivos'].pop(idx)
                st.success(f"Documento '{item['Nome']}' removido.")
                st.experimental_rerun()
else:
    st.info("Nenhum documento enviado at√© o momento.")
